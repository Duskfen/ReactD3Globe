{"version":3,"sources":["components/Globe.js","App.js","reportWebVitals.js","index.js"],"names":["Globe","props","createReflectedGlobe","canvas","d3","append","attr","width","height","canvasContext","node","getContext","_groups","projection","rotate","precision","fitSize","sphere","path","scale","call","zoom","on","renderWorld","geoJson","initializeSVG","svg","UpdatePointsOnGlobe","selectAll","point","testVisibility","RenderNewPointOnGlobe","circle","data","animate","r","duration","easing","onfinish","remove","randomIntFromInterval","min","max","Math","floor","random","RandomPointSpawning","CreateRandomPoint","setTimeout","WindowEventHandler","globe","document","querySelector","clientWidth","clientHeight","childNodes","topojson","Topology","objects","ne_110m_admin_0_countries","type","currentPoints","world","context","clearRect","lineWidth","beginPath","this","fillStyle","fill","stroke","strokeStyle","reflectX","visible","stream","x","y","v0","q0","r0","a0","tl","undefined","_scale","scaleExtent","map","zoomstarted","zoomed","event","that","t","length","atan2","p","versor","cartesian","invert","transform","k","pt","v1","delta","q1","multiply","d","s","sin","c","sign","cos","sqrt","rotation","Object","assign","selection","property","options","id","window","addEventListener","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2329ecf9.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport * as topojson from \"topojson\"\r\nimport * as d3 from 'd3'\r\nimport Topology from \"./geoJson/rough.geo.json\"\r\nimport versor from \"versor\"\r\n\r\nconst animationSpeed = 6000\r\n\r\nexport default class Globe extends Component {\r\n   constructor(props) {\r\n      super(props);\r\n\r\n      this.width = this.props.width | 400;\r\n      this.height = this.props.height | 400;\r\n\r\n      this.geoJson = topojson.feature(Topology, Topology.objects.ne_110m_admin_0_countries)\r\n      this.sphere = ({ type: \"Sphere\" })\r\n      this.projection = null;\r\n      this.svg = null;\r\n\r\n      this.currentPoints = [];\r\n   }\r\n\r\n   createReflectedGlobe = () => {\r\n      let canvas = d3.select(\"#globe\")\r\n         .append(\"canvas\")\r\n         .attr(\"width\", this.width)\r\n         .attr('height', this.height)\r\n\r\n      let canvasContext = canvas\r\n         .node().getContext(\"2d\");\r\n\r\n      canvas = canvas._groups[0][0]\r\n\r\n      this.projection = d3.geoOrthographic()\r\n         .rotate([-10, -50])\r\n         .precision(0.1)\r\n         .fitSize([this.width, this.height], this.sphere)\r\n\r\n\r\n      let path = d3.geoPath(this.projection, canvasContext);\r\n\r\n      this.projection.scale(600)\r\n      return d3.select(canvasContext.canvas)\r\n         .call(this.zoom(this.projection)\r\n            .on(\"zoom.render\", () => this.renderWorld(this.geoJson, canvasContext, path, canvas))\r\n            .on(\"end.render\", () => this.renderWorld(this.geoJson, canvasContext, path, canvas)))\r\n         .call(() => this.renderWorld(this.geoJson, canvasContext, path, canvas))\r\n         .node();\r\n   }\r\n\r\n   initializeSVG = () => {\r\n      //svg is for the globepoints\r\n      this.svg = d3.select(\"#globepoints\").append(\"svg\")\r\n         .attr(\"width\", this.width)\r\n         .attr('height', this.height);\r\n   }\r\n\r\n   renderWorld(world, context, path, canvas) {\r\n      context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n      context.lineWidth = 0.3;\r\n      context.beginPath();\r\n      path(this.sphere);\r\n      context.fillStyle = \"#fff\";\r\n      context.fill();\r\n      context.stroke()\r\n      context.strokeStyle = \"#E5E5E5\";\r\n\r\n      const r = this.projection.rotate();\r\n\r\n      this.projection.reflectX(true).rotate([r[0] + 180, -r[1], -r[2]]);\r\n\r\n      context.beginPath();\r\n      path(world);\r\n      context.fillStyle = \"rgba(0,0,0,0.1)\";\r\n      context.fill();\r\n      this.projection.reflectX(false).rotate(r);\r\n\r\n      context.beginPath();\r\n      path(world);\r\n      context.fillStyle = \"rgba(0,0,0,1)\";\r\n      context.fill();\r\n      context.stroke()\r\n      context.strokeStyle = \"white\";\r\n\r\n      // context.beginPath(); //elements are now rendered with svg, to support better animations;\r\n      // path.pointRadius([3])\r\n      // path({type: \"MultiPoint\", coordinates:points});\r\n      // context.fillStyle=\"tomato\"\r\n      // context.fill();\r\n\r\n      this.UpdatePointsOnGlobe();\r\n\r\n      context.beginPath();\r\n      path(this.sphere);\r\n   }\r\n\r\n   UpdatePointsOnGlobe = () => {\r\n      let circles = this.svg.selectAll(\"circle\");\r\n      circles\r\n         // .data(filteredPoints)\r\n         .attr(\"cx\", (point) => this.projection(point)[0])\r\n         .attr(\"cy\", (point) => this.projection(point)[1])\r\n         .attr(\"opacity\", (point) => {\r\n            if(this.testVisibility(this.projection)(point))return 1\r\n            else return 0;\r\n         });\r\n   }\r\n\r\n   RenderNewPointOnGlobe = (point) => {\r\n      let circle = this.svg.append(\"circle\") \r\n      .data([point])\r\n      .attr(\"class\", \"globepoint\")\r\n      .attr('r', 8)\r\n      .attr(\"cx\", (point) => this.projection(point)[0])\r\n      .attr(\"cy\", (point) => this.projection(point)[1])\r\n      .attr(\"data\", point).node()\r\n\r\n      let anim = circle.animate([\r\n         {r:\"0px\"},\r\n         {r:\"10px\"},\r\n         {r:\"0px\"},\r\n      ], {duration: animationSpeed, easing: \"ease-in-out\"})\r\n\r\n      anim.onfinish = () => circle.remove();\r\n   }\r\n\r\n   //min and max are included\r\n   randomIntFromInterval = (min, max) => Math.floor(Math.random() * (max - min + 1) + min);\r\n   CreateRandomPoint(){\r\n      //longitude -180 to 180\r\n      //latitude 0 to 90\r\n      return [this.randomIntFromInterval(-180, 180), this.randomIntFromInterval(0, 90)]\r\n\r\n   }\r\n\r\n   RandomPointSpawning = () => {\r\n      \r\n      this.RenderNewPointOnGlobe(this.CreateRandomPoint());\r\n\r\n      setTimeout(this.RandomPointSpawning, this.randomIntFromInterval(10, 90))\r\n   }\r\n\r\n\r\n   testVisibility(projection) {\r\n      let visible;\r\n      const stream = projection.stream({ point() { visible = true; } });\r\n\r\n      //visible is set to false, if a point is outside the stream, don't set visible to true, \r\n      // else set visible to true, return visible\r\n      return ([x, y]) => (visible = false, stream.point(x, y), visible);\r\n   }\r\n\r\n   zoom(projection, {\r\n      // Capture the projection’s original scale, before any zooming.\r\n      scale = projection._scale === undefined\r\n         ? (projection._scale = projection.scale())\r\n         : projection._scale,\r\n      scaleExtent = [0.04, 20]\r\n   } = {}) {\r\n      let v0, q0, r0, a0, tl;\r\n\r\n      const zoom = d3.zoom()\r\n         .scaleExtent(scaleExtent.map(x => x * scale))\r\n         .on(\"start\", zoomstarted)\r\n         .on(\"zoom\", zoomed);\r\n\r\n      function point(event, that) {\r\n         const t = d3.pointers(event, that);\r\n\r\n         if (t.length !== tl) {\r\n            tl = t.length;\r\n            if (tl > 1) a0 = Math.atan2(t[1][1] - t[0][1], t[1][0] - t[0][0]);\r\n            zoomstarted.call(that, event);\r\n         }\r\n\r\n         return tl > 1\r\n            ? [\r\n               d3.mean(t, p => p[0]),\r\n               d3.mean(t, p => p[1]),\r\n               Math.atan2(t[1][1] - t[0][1], t[1][0] - t[0][0])\r\n            ]\r\n            : t[0];\r\n      }\r\n\r\n      function zoomstarted(event) {\r\n         if (!event) return;\r\n         v0 = versor.cartesian(projection.invert(point(event, this)));\r\n         q0 = versor((r0 = projection.rotate()));\r\n      }\r\n\r\n      function zoomed(event) {\r\n         projection.scale(event.transform.k);\r\n         const pt = point(event, this);\r\n         const v1 = versor.cartesian(projection.rotate(r0).invert(pt));\r\n         const delta = versor.delta(v0, v1);\r\n         let q1 = versor.multiply(q0, delta);\r\n\r\n         // For multitouch, compose with a rotation around the axis.\r\n         if (pt[2]) {\r\n            const d = (pt[2] - a0) / 2;\r\n            const s = -Math.sin(d);\r\n            const c = Math.sign(Math.cos(d));\r\n            q1 = versor.multiply([Math.sqrt(1 - s * s), 0, 0, c * s], q1);\r\n         }\r\n\r\n         projection.rotate(versor.rotation(q1));\r\n\r\n         // In vicinity of the antipode (unstable) of q0, restart.\r\n         if (delta[0] < 0.7) zoomstarted.call(this);\r\n      }\r\n\r\n      return Object.assign(selection => selection\r\n         .property(\"__zoom\", d3.zoomIdentity.scale(projection.scale()))\r\n         .call(zoom), {\r\n         on(type, ...options) {\r\n            return options.length\r\n               ? (zoom.on(type, ...options), this)\r\n               : zoom.on(type);\r\n         }\r\n      });\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <>\r\n            <div id=\"globe\">\r\n               {/* {this.createNormalGlobe()} */}\r\n            </div>\r\n            <div id=\"globepoints\">\r\n            </div>\r\n\r\n         </>\r\n      )\r\n   }\r\n   componentDidMount() {\r\n      let globe = document.querySelector(\"#globe\")\r\n\r\n      this.width = globe.clientWidth;\r\n      this.height = globe.clientHeight;\r\n\r\n      this.initializeSVG();\r\n      this.createReflectedGlobe();\r\n      this.RandomPointSpawning();\r\n\r\n      window.addEventListener(\"resize\", this.WindowEventHandler);\r\n   }\r\n\r\n   WindowEventHandler = () => {\r\n      let globe = document.querySelector(\"#globe\")\r\n      let svg = document.querySelector(\"#globepoints svg\")\r\n\r\n      this.width = globe.clientWidth;\r\n      this.height = globe.clientHeight;\r\n      svg.remove()\r\n      globe.childNodes[0].remove()\r\n      this.createReflectedGlobe();\r\n      this.initializeSVG();\r\n   }\r\n}\r\n","import './App.css';\nimport Globe from './components/Globe'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n         Prototyp For React Globe\n      </header>\n      <main>\n         <Globe></Globe>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}